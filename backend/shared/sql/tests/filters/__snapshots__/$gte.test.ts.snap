// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`$gte MySQL Behaviour Comparing JSON numbers values is numberic: SQL Query for filter: {"settings.age":{"$gte":-9}} 1`] = `
{
  "params": [
    -9,
  ],
  "query": "SELECT \`test_table\`.* FROM \`test_table\` WHERE JSON_VALUE(\`test_table\`.\`settings\`,"$.age" RETURNING UNSIGNED ERROR ON ERROR) >= ?",
}
`;

exports[`$gte MySQL Behaviour Comparing JSON numbers values is numberic: SQL Query for filter: {"settings.age":{"$gte":0}} 1`] = `
{
  "params": [
    0,
  ],
  "query": "SELECT \`test_table\`.* FROM \`test_table\` WHERE JSON_VALUE(\`test_table\`.\`settings\`,"$.age" RETURNING UNSIGNED ERROR ON ERROR) >= ?",
}
`;

exports[`$gte MySQL Behaviour Comparing JSON numbers values is numberic: SQL Query for filter: {"settings.age":{"$gte":1}} 1`] = `
{
  "params": [
    1,
  ],
  "query": "SELECT \`test_table\`.* FROM \`test_table\` WHERE JSON_VALUE(\`test_table\`.\`settings\`,"$.age" RETURNING UNSIGNED ERROR ON ERROR) >= ?",
}
`;

exports[`$gte MySQL Behaviour Comparing JSON numbers values is numberic: SQL Query for filter: {"settings.age":{"$gte":9}} 1`] = `
{
  "params": [
    9,
  ],
  "query": "SELECT \`test_table\`.* FROM \`test_table\` WHERE JSON_VALUE(\`test_table\`.\`settings\`,"$.age" RETURNING UNSIGNED ERROR ON ERROR) >= ?",
}
`;

exports[`$gte MySQL Behaviour Comparing JSON numbers values is numberic: SQL Query for filter: {"settings.age":{"$gte":10}} 1`] = `
{
  "params": [
    10,
  ],
  "query": "SELECT \`test_table\`.* FROM \`test_table\` WHERE JSON_VALUE(\`test_table\`.\`settings\`,"$.age" RETURNING UNSIGNED ERROR ON ERROR) >= ?",
}
`;

exports[`$gte MySQL Behaviour Comparing JSON numbers values is numberic: SQL Query for not match filter: {"settings.age":{"$gte":12}} 1`] = `
{
  "params": [
    12,
  ],
  "query": "SELECT \`test_table\`.* FROM \`test_table\` WHERE JSON_VALUE(\`test_table\`.\`settings\`,"$.age" RETURNING UNSIGNED ERROR ON ERROR) >= ?",
}
`;

exports[`$gte MySQL Behaviour Comparing JSON numbers values is numberic: SQL Query for not match filter: {"settings.age":{"$gte":20}} 1`] = `
{
  "params": [
    20,
  ],
  "query": "SELECT \`test_table\`.* FROM \`test_table\` WHERE JSON_VALUE(\`test_table\`.\`settings\`,"$.age" RETURNING UNSIGNED ERROR ON ERROR) >= ?",
}
`;

exports[`$gte MySQL Behaviour Comparing JSON string values is case insensitive: SQL Query for filter: {"settings.name":{"$gte":"ALICE"}} 1`] = `
{
  "params": [
    "alice",
  ],
  "query": "SELECT \`test_table\`.* FROM \`test_table\` WHERE JSON_VALUE(\`test_table\`.\`settings\`,"$.name" RETURNING CHAR CHARACTER SET utf8mb4 ERROR ON ERROR) >= ?",
}
`;

exports[`$gte MySQL Behaviour Comparing JSON string values is case insensitive: SQL Query for filter: {"settings.name":{"$gte":"Alic"}} 1`] = `
{
  "params": [
    "alic",
  ],
  "query": "SELECT \`test_table\`.* FROM \`test_table\` WHERE JSON_VALUE(\`test_table\`.\`settings\`,"$.name" RETURNING CHAR CHARACTER SET utf8mb4 ERROR ON ERROR) >= ?",
}
`;

exports[`$gte MySQL Behaviour Comparing JSON string values is case insensitive: SQL Query for filter: {"settings.name":{"$gte":"Alice"}} 1`] = `
{
  "params": [
    "alice",
  ],
  "query": "SELECT \`test_table\`.* FROM \`test_table\` WHERE JSON_VALUE(\`test_table\`.\`settings\`,"$.name" RETURNING CHAR CHARACTER SET utf8mb4 ERROR ON ERROR) >= ?",
}
`;

exports[`$gte MySQL Behaviour Comparing JSON string values is case insensitive: SQL Query for filter: {"settings.name":{"$gte":"a"}} 1`] = `
{
  "params": [
    "a",
  ],
  "query": "SELECT \`test_table\`.* FROM \`test_table\` WHERE JSON_VALUE(\`test_table\`.\`settings\`,"$.name" RETURNING CHAR CHARACTER SET utf8mb4 ERROR ON ERROR) >= ?",
}
`;

exports[`$gte MySQL Behaviour Comparing JSON string values is case insensitive: SQL Query for filter: {"settings.name":{"$gte":"aLice"}} 1`] = `
{
  "params": [
    "alice",
  ],
  "query": "SELECT \`test_table\`.* FROM \`test_table\` WHERE JSON_VALUE(\`test_table\`.\`settings\`,"$.name" RETURNING CHAR CHARACTER SET utf8mb4 ERROR ON ERROR) >= ?",
}
`;

exports[`$gte MySQL Behaviour Comparing JSON string values is case insensitive: SQL Query for filter: {"settings.name":{"$gte":"alic"}} 1`] = `
{
  "params": [
    "alic",
  ],
  "query": "SELECT \`test_table\`.* FROM \`test_table\` WHERE JSON_VALUE(\`test_table\`.\`settings\`,"$.name" RETURNING CHAR CHARACTER SET utf8mb4 ERROR ON ERROR) >= ?",
}
`;

exports[`$gte MySQL Behaviour Comparing JSON string values is case insensitive: SQL Query for filter: {"settings.name":{"$gte":"alice"}} 1`] = `
{
  "params": [
    "alice",
  ],
  "query": "SELECT \`test_table\`.* FROM \`test_table\` WHERE JSON_VALUE(\`test_table\`.\`settings\`,"$.name" RETURNING CHAR CHARACTER SET utf8mb4 ERROR ON ERROR) >= ?",
}
`;

exports[`$gte MySQL Behaviour Comparing JSON string values is case insensitive: SQL Query for not match filter: {"settings.name":{"$gte":"b"}} 1`] = `
{
  "params": [
    "b",
  ],
  "query": "SELECT \`test_table\`.* FROM \`test_table\` WHERE JSON_VALUE(\`test_table\`.\`settings\`,"$.name" RETURNING CHAR CHARACTER SET utf8mb4 ERROR ON ERROR) >= ?",
}
`;

exports[`$gte MySQL Behaviour Comparing numbers values is numberic: SQL Query for filter: {"age":{"$gte":-9}} 1`] = `
{
  "params": [
    -9,
  ],
  "query": "SELECT \`test_table\`.* FROM \`test_table\` WHERE \`test_table\`.\`age\` >= ?",
}
`;

exports[`$gte MySQL Behaviour Comparing numbers values is numberic: SQL Query for filter: {"age":{"$gte":0}} 1`] = `
{
  "params": [
    0,
  ],
  "query": "SELECT \`test_table\`.* FROM \`test_table\` WHERE \`test_table\`.\`age\` >= ?",
}
`;

exports[`$gte MySQL Behaviour Comparing numbers values is numberic: SQL Query for filter: {"age":{"$gte":1}} 1`] = `
{
  "params": [
    1,
  ],
  "query": "SELECT \`test_table\`.* FROM \`test_table\` WHERE \`test_table\`.\`age\` >= ?",
}
`;

exports[`$gte MySQL Behaviour Comparing numbers values is numberic: SQL Query for filter: {"age":{"$gte":9}} 1`] = `
{
  "params": [
    9,
  ],
  "query": "SELECT \`test_table\`.* FROM \`test_table\` WHERE \`test_table\`.\`age\` >= ?",
}
`;

exports[`$gte MySQL Behaviour Comparing numbers values is numberic: SQL Query for filter: {"age":{"$gte":10}} 1`] = `
{
  "params": [
    10,
  ],
  "query": "SELECT \`test_table\`.* FROM \`test_table\` WHERE \`test_table\`.\`age\` >= ?",
}
`;

exports[`$gte MySQL Behaviour Comparing numbers values is numberic: SQL Query for not match filter: {"age":{"$gte":12}} 1`] = `
{
  "params": [
    12,
  ],
  "query": "SELECT \`test_table\`.* FROM \`test_table\` WHERE \`test_table\`.\`age\` >= ?",
}
`;

exports[`$gte MySQL Behaviour Comparing numbers values is numberic: SQL Query for not match filter: {"age":{"$gte":20}} 1`] = `
{
  "params": [
    20,
  ],
  "query": "SELECT \`test_table\`.* FROM \`test_table\` WHERE \`test_table\`.\`age\` >= ?",
}
`;

exports[`$gte MySQL Behaviour Comparing string values is case insensitive: SQL Query for filter: {"name":{"$gte":"ALICE"}} 1`] = `
{
  "params": [
    "alice",
  ],
  "query": "SELECT \`test_table\`.* FROM \`test_table\` WHERE \`test_table\`.\`name\` >= ?",
}
`;

exports[`$gte MySQL Behaviour Comparing string values is case insensitive: SQL Query for filter: {"name":{"$gte":"Alic"}} 1`] = `
{
  "params": [
    "alic",
  ],
  "query": "SELECT \`test_table\`.* FROM \`test_table\` WHERE \`test_table\`.\`name\` >= ?",
}
`;

exports[`$gte MySQL Behaviour Comparing string values is case insensitive: SQL Query for filter: {"name":{"$gte":"Alice"}} 1`] = `
{
  "params": [
    "alice",
  ],
  "query": "SELECT \`test_table\`.* FROM \`test_table\` WHERE \`test_table\`.\`name\` >= ?",
}
`;

exports[`$gte MySQL Behaviour Comparing string values is case insensitive: SQL Query for filter: {"name":{"$gte":"a"}} 1`] = `
{
  "params": [
    "a",
  ],
  "query": "SELECT \`test_table\`.* FROM \`test_table\` WHERE \`test_table\`.\`name\` >= ?",
}
`;

exports[`$gte MySQL Behaviour Comparing string values is case insensitive: SQL Query for filter: {"name":{"$gte":"aLice"}} 1`] = `
{
  "params": [
    "alice",
  ],
  "query": "SELECT \`test_table\`.* FROM \`test_table\` WHERE \`test_table\`.\`name\` >= ?",
}
`;

exports[`$gte MySQL Behaviour Comparing string values is case insensitive: SQL Query for filter: {"name":{"$gte":"alic"}} 1`] = `
{
  "params": [
    "alic",
  ],
  "query": "SELECT \`test_table\`.* FROM \`test_table\` WHERE \`test_table\`.\`name\` >= ?",
}
`;

exports[`$gte MySQL Behaviour Comparing string values is case insensitive: SQL Query for filter: {"name":{"$gte":"alice"}} 1`] = `
{
  "params": [
    "alice",
  ],
  "query": "SELECT \`test_table\`.* FROM \`test_table\` WHERE \`test_table\`.\`name\` >= ?",
}
`;

exports[`$gte MySQL Behaviour Comparing string values is case insensitive: SQL Query for not match filter: {"name":{"$gte":"b"}} 1`] = `
{
  "params": [
    "b",
  ],
  "query": "SELECT \`test_table\`.* FROM \`test_table\` WHERE \`test_table\`.\`name\` >= ?",
}
`;

exports[`$gte MySQL Behaviour NULL values are always the smallest for JSON numbers: SQL Query for filter: {"settings.age":{"$gte":null}} 1`] = `
{
  "params": [],
  "query": "SELECT \`test_table\`.* FROM \`test_table\`",
}
`;

exports[`$gte MySQL Behaviour NULL values are always the smallest for JSON numbers: SQL Query for not match filter: {"settings.age":{"$gte":-1000}} 1`] = `
{
  "params": [
    -1000,
  ],
  "query": "SELECT \`test_table\`.* FROM \`test_table\` WHERE JSON_VALUE(\`test_table\`.\`settings\`,"$.age" RETURNING UNSIGNED ERROR ON ERROR) >= ?",
}
`;

exports[`$gte MySQL Behaviour NULL values are always the smallest for JSON numbers: SQL Query for not match filter: {"settings.age":{"$gte":0}} 1`] = `
{
  "params": [
    0,
  ],
  "query": "SELECT \`test_table\`.* FROM \`test_table\` WHERE JSON_VALUE(\`test_table\`.\`settings\`,"$.age" RETURNING UNSIGNED ERROR ON ERROR) >= ?",
}
`;

exports[`$gte MySQL Behaviour NULL values are always the smallest for JSON strings: SQL Query for filter: {"settings.name":{"$gte":null}} 1`] = `
{
  "params": [],
  "query": "SELECT \`test_table\`.* FROM \`test_table\`",
}
`;

exports[`$gte MySQL Behaviour NULL values are always the smallest for JSON strings: SQL Query for not match filter: {"settings.name":{"$gte":""}} 1`] = `
{
  "params": [
    "",
  ],
  "query": "SELECT \`test_table\`.* FROM \`test_table\` WHERE JSON_VALUE(\`test_table\`.\`settings\`,"$.name" RETURNING CHAR CHARACTER SET utf8mb4 ERROR ON ERROR) >= ?",
}
`;

exports[`$gte MySQL Behaviour NULL values are always the smallest for JSON strings: SQL Query for not match filter: {"settings.name":{"$gte":"aaaa"}} 1`] = `
{
  "params": [
    "aaaa",
  ],
  "query": "SELECT \`test_table\`.* FROM \`test_table\` WHERE JSON_VALUE(\`test_table\`.\`settings\`,"$.name" RETURNING CHAR CHARACTER SET utf8mb4 ERROR ON ERROR) >= ?",
}
`;

exports[`$gte MySQL Behaviour NULL values are always the smallest for strings: SQL Query for filter: {"name":{"$gte":null}} 1`] = `
{
  "params": [],
  "query": "SELECT \`test_table\`.* FROM \`test_table\`",
}
`;

exports[`$gte MySQL Behaviour NULL values are always the smallest for strings: SQL Query for not match filter: {"name":{"$gte":""}} 1`] = `
{
  "params": [
    "",
  ],
  "query": "SELECT \`test_table\`.* FROM \`test_table\` WHERE \`test_table\`.\`name\` >= ?",
}
`;

exports[`$gte MySQL Behaviour NULL values are always the smallest for strings: SQL Query for not match filter: {"name":{"$gte":"aaaa"}} 1`] = `
{
  "params": [
    "aaaa",
  ],
  "query": "SELECT \`test_table\`.* FROM \`test_table\` WHERE \`test_table\`.\`name\` >= ?",
}
`;
