@use "../base/variables" as *;
@use "../base/text-styles" as *;


.split-view-controller {
    --split-view-width: 280px;

    height: 100vh;
    height: 100dvh;
    height: calc(var(--vh, 1vh) * 100);
    max-height: 100vh;
    max-height: 100dvh;
    overflow: hidden;
    overflow: clip;

    >.master {
        flex-shrink: 0;
        flex-grow: 0;
        position: sticky;
        left: 0;
        top: 0;
        height: 100vh;
        height: calc(var(--vh, 1vh) * 100);

        overflow: hidden;
        overflow: clip;
        -webkit-overflow-scrolling: touch;

        // do not start scrolling parents if we reached the edge of this view
        // we'll need to add a polyfill for Safari in JS to disable overscroll (currently not available)
        overscroll-behavior-y: contain;

        &:last-child {
            position: relative;
            overflow: visible;
            width: 100%;
            height: auto;
        }

        z-index: 100;
        overscroll-behavior: contain;
    }

    >.detail {
        background: var(--color-current-background);
        overflow: hidden;
        overflow: clip;

        --st-horizontal-padding: var(--split-view-detail-horizontal-padding, 40px);
    }

    &[data-has-detail="true"] {
        display: grid;
        grid-template-columns: 320px 1fr;
        grid-template-columns: var(--split-view-width, 320px) 1fr;

        &>.master {
            min-width: 0;
        }

        &>.detail {
            min-width: 0;
            min-height: 100vh;
            min-height: calc(var(--vh, 1vh) * 100);
        }
    }

    &[data-has-detail="true"] {
        >.master {
            border-right: $border-width-thin solid $color-border;
            background: $color-background-shade;
            --color-current-background: #{$color-background-shade};
            --color-current-background-shade: #{$color-background-shade-darker};

            body.modern & {
                overflow: hidden;
            }
        }
    }
}

.sheet--old {
    transform: translate3d(0, 0, 0);

    // Prevent scrolling outer areas when touching the overlay
    @supports not (overscroll-behavior: contain) {
        touch-action: none;
    }

    --popup-padding-top-outside: var(--st-safe-area-top, 0px);
    --popup-padding-bottom-outside: max(var(--st-safe-area-bottom, 0px), var(--keyboard-height, 0px), var(--bottom-padding, 0px));

    padding-bottom: var(--popup-padding-bottom-outside, 0px);
    padding-top: var(--popup-padding-top-outside, 0px);


    &.show-enter-from,
    &.show-leave-to {
        &>div {
            transform: translate(-50%, 30vh);
        }
    }

    >div {
        position: absolute;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%) translate(0, calc(var(--popup-padding-top-outside, 0px) / 2 - var(--popup-padding-bottom-outside, 0px) / 2));

        touch-action: auto;
        background: $color-background;
        border-radius: $border-radius-modals;

        //width: 400px;
        //width: min(100vw, var(--st-sheet-width, 400px));
        width: auto;
        max-width: none;

        // max-width: 100vw;
        // min-width: min(100vw, var(--st-sheet-width, 400px));

        .st-view {
            contain: content;
            // We set explicit widths on all views inside a sheet, so we can animate width changes
            width: min(100vw, var(--st-sheet-width, 400px));
        }

        overscroll-behavior: contain;
        box-shadow: 0px 10px 60px 0px $color-overlay-shadow,
        0px 15px 30px 0px $color-overlay-shadow;

        --st-safe-area-bottom: 0px;
        --keyboard-height: 0px;
        --bottom-padding: 0px;

        body.modern & {
            overflow: hidden;
        }

        //max-height: calc(min(max(50vh, 1000px), var(--vh, 1vh) * 100 - 40px));

        --popup-height: calc(min(max(50vh, 1000px), var(--vh, 1vh) * 100) - var(--popup-padding-top-outside, 0px) - var(--popup-padding-bottom-outside, 0px));
        max-height: var(--popup-height);
        transition: transform 0.3s,
        opacity 0.3s,
        max-height 0.3s;
        will-change: transform,
        opacity,
        max-height;

        >* {
            --vh: calc(var(--popup-height, 0px) / 100);
        }

        /*@media (max-height: 900px) {
            max-height: calc(min(max(50vh, 1000px), var(--vh, 1vh) * 100 - 20px));

            > * {
                --vh: calc(min(max(50vh, 1000px), var(--saved-vh, 1vh) * 100 - 20px) / 100);
            }
        }

        @media (max-height: 600px) {
            max-height: calc(min(max(50vh, 1000px), var(--vh, 1vh) * 100 - 0px));

            > * {
                --vh: calc(min(max(50vh, 1000px), var(--saved-vh, 1vh) * 100) / 100);
            }
        }*/
    }

    @media (max-height: 900px) {
        // Reduce navigation bar height if height is limited
        --navigation-bar-margin: 10px;
    }

    .navigation-controller {
        transition: height 0.25s cubic-bezier(0.4, 0.0, 0.2, 1), width 0.25s cubic-bezier(0.4, 0.0, 0.2, 1);
        will-change: height, width;
    }
}

.side-view {
    // DO NOT ADD MAX HEIGHT HERE! Always add it to the children of the navigation controllers!
    background: rgba(black, 0.7);
    position: fixed;
    left: 0;
    top: 0;
    bottom: 0;
    right: 0;
    z-index: 10000;
    visibility: visible;
    opacity: 1;
    transition: background-color 0.3s, opacity 0.3s, visibility step-start 0.3s;

    ~.side-view {
        background-color: rgba(black, 0.4);
    }

    // Improve performance

    &>div {
        position: fixed;
        right: 0;
        top: 0;
        bottom: 0;
        width: 100%;
        max-width: 800px;
        background: white;
        background: var(--color-white, white);
        border-radius: 0px;

        // Rounded corners need overflow hidden on scroll
        overflow: hidden;

        height: 100%;

        overflow: hidden;
        overflow-y: auto;
        -webkit-overflow-scrolling: touch;
        overscroll-behavior-y: contain;

        box-sizing: border-box;

        // Fix chrome bug that scrollbars are not visible anymore
        transform: translate3d(0, 0, 0);

        // Push down
        transition: transform 0.3s, border-radius 0.3s;
        transform-origin: 0% 50%;
    }

    &.push-down-full {
        transition: background-color 0.3s, opacity 0.3s, visibility step-end 0.3s;
        visibility: hidden;
        opacity: 0;
        background-color: rgba(black, 0.6);

        &>div {
            transform: scale(0.9, 0.9) translate3d(-15px, 0, 0);
            border-radius: 5px;
        }
    }

    &.push-down {
        background-color: rgba(black, 0.6);

        &>div {
            transform: scale(0.95, 0.95) translate3d(-10px, 0, 0);
            border-radius: 5px;
        }
    }

    &.show-enter-active,
    &.show-leave-active,
    &[data-extended-enter="true"] {
        position: fixed;

        &>div {
            transition: transform 0.3s;
        }
    }

    &.show-enter-from,
    &.show-leave-to

    /* .show-leave-active below version 2.1.8 */
        {
        background-color: rgba(black, 0);

        &>div {
            transform: translate(100%, 0);
        }
    }

    &.show-enter-active,
    &.show-leave-active {
        z-index: 10000;
    }
}

.side-view {
    transform: translate3d(0, 0, 0);

    @media (prefers-color-scheme: dark) {
        background: rgba(8, 8, 8, 0.7);
    }

    &>div {
        max-width: 400px;
        overscroll-behavior: contain;

        @media (prefers-color-scheme: dark) {
            box-shadow: 0 0 0 1px $color-border;
        }
    }
}